# -*- coding: utf-8 -*-
"""Student grade model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SEC7uJ1PhSZ67_eVsqQ3z95h3hSCxo_s
"""

import pandas as pd
import numpy as np

df1 = pd.read_csv('student-mat.csv')
df2 = pd.read_csv('student-por.csv')

df1

df1.isnull().sum().sum()

df1.columns

df2.columns

df2.head()

df2.isnull().sum().sum()

df1["course"] = "math"
df2["course"] = "portuguese"
df = pd.concat([df1, df2], ignore_index=True)

df.head()

df1.shape

df2.shape

df.shape

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

X = df.drop('G3',axis=1)
y = df['G3']

categorical_features = X.select_dtypes(include='object').columns
numerical_features = X.select_dtypes(exclude='object').columns

Cat_col_transfer = Pipeline(steps=[
    ('imputer',SimpleImputer(strategy='most_frequent')),
    ('encoder',OneHotEncoder())
])

num_col_transfer = Pipeline(steps=[
    ('imputer',SimpleImputer(strategy='mean')),
    ('scaler',StandardScaler())
])

CT = ColumnTransformer([
    ('cat',Cat_col_transfer,categorical_features),
    ('num',num_col_transfer,numerical_features)
])

model = Pipeline([
    ('CT',CT),
     ('model',RandomForestRegressor(n_estimators=100,random_state=42))])

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

MAE = mean_absolute_error(y_test,y_pred)
MSE = mean_squared_error(y_test,y_pred)
R2 = r2_score(y_test,y_pred)
MAE,MSE,R2

importances = model.named_steps["model"].feature_importances_
feature_names = model.named_steps["CT"].get_feature_names_out()
top_features = pd.Series(importances, index=feature_names).sort_values(ascending=False)

importances

feature_names

top_features

import joblib

joblib.dump(model,'model.pkl')